{% comment %}
Reusable Nutrition Accordion Snippet
Usage: {% render 'nutrition-accordion', product: product, variant_selector: true, css_class: 'my-custom-class' %}

Parameters:
- product: The product object (required)
- variant_selector: Show variant dropdown (default: false)
- css_class: Additional CSS classes (optional)
- inline_style: Whether to use inline styling (default: true)
{% endcomment %}

{% liquid
  assign host_product = product
  if host_product == nil
    assign host_product = product
  endif
  
  assign show_selector = variant_selector | default: false
  assign extra_classes = css_class | default: ''
  assign use_inline_style = inline_style | default: true
  assign unique_id = 'nutrition-' | append: host_product.id | append: '-' | append: 'now' | date: '%s'
%}

{% if host_product %}
  <section class="nutrition-accordion {{ extra_classes }}" id="{{ unique_id }}" data-product-id="{{ host_product.id }}"{% if use_inline_style %} style="margin: 16px 0; font-family: 'Acumin Pro Condensed', sans-serif;"{% endif %}>
    <div class="nutrition-accordion__header" role="button" aria-expanded="false" tabindex="0"{% if use_inline_style %} style="padding: 12px 16px; border: 1px solid var(--color-primary); border-radius: 12px; display: flex; align-items: center; justify-content: space-between; cursor: pointer; background: var(--color-primary); font-family: 'Acumin Pro Condensed', sans-serif;"{% endif %}>
      <h3{% if use_inline_style %} style="margin: 0; color: #fff;"{% endif %}>{{ 'nutrition.title' | t }}</h3>
      <span class="nutrition-accordion__chevron" aria-hidden="true"{% if use_inline_style %} style="width: 10px; height: 10px; border-right: 2px solid #fff; border-bottom: 2px solid #fff; transform: rotate(45deg); transition: transform .25s;"{% endif %}></span>
    </div>

    <div class="nutrition-accordion__content" hidden{% if use_inline_style %} style="padding: 16px; background: #fff; border: 1px solid var(--color-primary); border-top: none; border-radius: 0 0 12px 12px;"{% endif %}>
      {% if show_selector %}
        <select class="nutrition-variant-select"{% if use_inline_style %} style="width: 100%; margin-bottom: 16px; padding: 8px 12px; border: 1px solid var(--color-primary); border-radius: 8px; color: var(--color-primary);"{% endif %}>
          {% for v in host_product.variants %}
            <option value="{{ v.id }}">{{ host_product.title }} {{ v.title }}</option>
          {% endfor %}
        </select>
      {% endif %}

      <div class="nutrition-accordion__variants">
        {% for v in host_product.variants %}
          {% assign nf = v.metafields.custom.nutrition.value %}
          <div class="nutrition-variant" data-variant-id="{{ v.id }}" {% if forloop.first == false %}hidden{% endif %}>
            {% if nf %}
              {% assign portion_size = nf.portion_size %}
              {% assign magnesium_dv = 375.0 %}
              {% assign zinc_dv = 10.0 %}
              {% assign iron_dv = 14.0 %}

              {% if nf.ingredients %}
                <div class="nutrition-ingredients"{% if use_inline_style %} style="margin-bottom: 16px; color: var(--color-primary);"{% endif %}>
                  <strong>{{ 'nutrition.ingredients' | t }}</strong>
                  <span class="nutrition-ingredients-text" data-ingredients="{{ nf.ingredients | escape }}">{{ nf.ingredients }}</span>
                </div>
              {% endif %}

              <div class="nutrition-table"{% if use_inline_style %} style="border: 1px solid var(--color-primary); border-radius: 12px; overflow: hidden; background: #fff;"{% endif %}>
                <table{% if use_inline_style %} style="width: 100%; border-collapse: collapse;"{% endif %}>
                  <thead>
                    <tr{% if use_inline_style %} style="background: var(--color-primary-light);"{% endif %}>
                      <th{% if use_inline_style %} style="padding: 12px; text-align: left; border-bottom: 1px solid var(--color-primary); color: var(--color-primary); font-weight: 600;"{% endif %}>{{ 'nutrition.nutritional_information' | t }}</th>
                      <th{% if use_inline_style %} style="padding: 12px; text-align: center; border-bottom: 1px solid var(--color-primary); color: var(--color-primary); font-weight: 600;"{% endif %}>
                        {% if nf.portion_label != blank %}{{ nf.portion_label }}{% else %}{{ portion_size }} {{ nf.portion_unit }}{% endif %}
                      </th>
                      <th{% if use_inline_style %} style="padding: 12px; text-align: center; border-bottom: 1px solid var(--color-primary); color: var(--color-primary); font-weight: 600;"{% endif %}>{{ 'nutrition.per_100g' | t }}</th>
                    </tr>
                  </thead>
                  <tbody>
                    {% if nf.energy_kj_100g or nf.energy_kcal_100g %}
                      {% assign energy_kj_portion = nf.energy_kj_100g | times: portion_size | divided_by: 100 | round: 0 %}
                      {% assign energy_kcal_portion = nf.energy_kcal_100g | times: portion_size | divided_by: 100 | round: 0 %}
                      {% assign energy_kj_100g = nf.energy_kj_100g | round: 0 %}
                      {% assign energy_kcal_100g = nf.energy_kcal_100g | round: 0 %}
                      <tr>
                        <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.energy' | t }}</th>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ energy_kj_portion }} KJ / {{ energy_kcal_portion }} kcal</td>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ energy_kj_100g }} KJ / {{ energy_kcal_100g }} kcal</td>
                      </tr>
                    {% endif %}

                    {% if nf.fat_g_100g %}
                      {% assign fat_portion_raw = nf.fat_g_100g | times: portion_size | divided_by: 100.0 %}
                      {% if fat_portion_raw >= 10 %}
                        {% assign fat_portion = fat_portion_raw | round: 0 %}
                      {% else %}
                        {% assign fat_portion = fat_portion_raw | round: 1 %}
                      {% endif %}
                      {% if nf.fat_g_100g >= 10 %}
                        {% assign fat_100g = nf.fat_g_100g | round: 0 %}
                      {% else %}
                        {% assign fat_100g = nf.fat_g_100g | round: 1 %}
                      {% endif %}
                      <tr>
                        <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.fat' | t }}</th>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ fat_portion }} g</td>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ fat_100g }} g</td>
                      </tr>
                    {% endif %}

                    {% if nf.sat_fat_g_100g %}
                      {% assign sat_fat_portion_raw = nf.sat_fat_g_100g | times: portion_size | divided_by: 100.0 %}
                      {% if sat_fat_portion_raw >= 10 %}
                        {% assign sat_fat_portion = sat_fat_portion_raw | round: 0 %}
                      {% else %}
                        {% assign sat_fat_portion = sat_fat_portion_raw | round: 1 %}
                      {% endif %}
                      {% if nf.sat_fat_g_100g >= 10 %}
                        {% assign sat_fat_100g = nf.sat_fat_g_100g | round: 0 %}
                      {% else %}
                        {% assign sat_fat_100g = nf.sat_fat_g_100g | round: 1 %}
                      {% endif %}
                      <tr>
                        <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.saturated_fat' | t }}</th>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ sat_fat_portion }} g</td>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ sat_fat_100g }} g</td>
                      </tr>
                    {% endif %}

                    {% if nf.carbs_g_100g %}
                      {% assign carbs_portion_raw = nf.carbs_g_100g | times: portion_size | divided_by: 100.0 %}
                      {% if carbs_portion_raw >= 10 %}
                        {% assign carbs_portion = carbs_portion_raw | round: 0 %}
                      {% else %}
                        {% assign carbs_portion = carbs_portion_raw | round: 1 %}
                      {% endif %}
                      {% if nf.carbs_g_100g >= 10 %}
                        {% assign carbs_100g = nf.carbs_g_100g | round: 0 %}
                      {% else %}
                        {% assign carbs_100g = nf.carbs_g_100g | round: 1 %}
                      {% endif %}
                      <tr>
                        <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.carbohydrates' | t }}</th>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ carbs_portion }} g</td>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ carbs_100g }} g</td>
                      </tr>
                    {% endif %}

                    {% if nf.sugars_g_100g %}
                      {% assign sugars_portion_raw = nf.sugars_g_100g | times: portion_size | divided_by: 100.0 %}
                      {% if sugars_portion_raw >= 10 %}
                        {% assign sugars_portion = sugars_portion_raw | round: 0 %}
                      {% else %}
                        {% assign sugars_portion = sugars_portion_raw | round: 1 %}
                      {% endif %}
                      {% if nf.sugars_g_100g >= 10 %}
                        {% assign sugars_100g = nf.sugars_g_100g | round: 0 %}
                      {% else %}
                        {% assign sugars_100g = nf.sugars_g_100g | round: 1 %}
                      {% endif %}
                      <tr>
                        <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.sugars' | t }}</th>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ sugars_portion }} g</td>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ sugars_100g }} g</td>
                      </tr>
                    {% endif %}

                    {% if nf.fiber_g_100g %}
                      {% assign fiber_portion_raw = nf.fiber_g_100g | times: portion_size | divided_by: 100.0 %}
                      {% if fiber_portion_raw >= 10 %}
                        {% assign fiber_portion = fiber_portion_raw | round: 0 %}
                      {% else %}
                        {% assign fiber_portion = fiber_portion_raw | round: 1 %}
                      {% endif %}
                      {% if nf.fiber_g_100g >= 10 %}
                        {% assign fiber_100g = nf.fiber_g_100g | round: 0 %}
                      {% else %}
                        {% assign fiber_100g = nf.fiber_g_100g | round: 1 %}
                      {% endif %}
                      <tr>
                        <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.fiber' | t }}</th>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ fiber_portion }} g</td>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ fiber_100g }} g</td>
                      </tr>
                    {% endif %}

                    {% if nf.protein_g_100g %}
                      {% assign protein_portion_raw = nf.protein_g_100g | times: portion_size | divided_by: 100.0 %}
                      {% if protein_portion_raw >= 10 %}
                        {% assign protein_portion = protein_portion_raw | round: 0 %}
                      {% else %}
                        {% assign protein_portion = protein_portion_raw | round: 1 %}
                      {% endif %}
                      {% if nf.protein_g_100g >= 10 %}
                        {% assign protein_100g = nf.protein_g_100g | round: 0 %}
                      {% else %}
                        {% assign protein_100g = nf.protein_g_100g | round: 1 %}
                      {% endif %}
                      <tr>
                        <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.protein' | t }}</th>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ protein_portion }} g</td>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ protein_100g }} g</td>
                      </tr>
                    {% endif %}

                    {% if nf.salt_g_100g %}
                      {% assign salt_portion_raw = nf.salt_g_100g | times: portion_size | divided_by: 100.0 %}
                      {% if salt_portion_raw >= 10 %}
                        {% assign salt_portion = salt_portion_raw | round: 0 %}
                      {% else %}
                        {% assign salt_portion = salt_portion_raw | round: 1 %}
                      {% endif %}
                      {% if nf.salt_g_100g >= 10 %}
                        {% assign salt_100g = nf.salt_g_100g | round: 0 %}
                      {% else %}
                        {% assign salt_100g = nf.salt_g_100g | round: 1 %}
                      {% endif %}
                      <tr>
                        <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.salt' | t }}</th>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ salt_portion }} g</td>
                        <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ salt_100g }} g</td>
                      </tr>
                    {% endif %}

                    {% if nf.magnesium_mg_100g or nf.zinc_mg_100g or nf.iron_mg_100g %}
                      <tr>
                        <th colspan="3"{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary); font-weight: 600; background: var(--color-primary-light);"{% endif %}>{{ 'nutrition.minerals' | t }}</th>
                      </tr>
                      
                      {% if nf.magnesium_mg_100g %}
                        {% assign magnesium_portion_raw = nf.magnesium_mg_100g | times: portion_size | divided_by: 100.0 %}
                        {% if magnesium_portion_raw >= 10 %}
                          {% assign magnesium_portion = magnesium_portion_raw | round: 0 %}
                        {% else %}
                          {% assign magnesium_portion = magnesium_portion_raw | round: 1 %}
                        {% endif %}
                        {% if nf.magnesium_mg_100g >= 10 %}
                          {% assign magnesium_100g = nf.magnesium_mg_100g | round: 0 %}
                        {% else %}
                          {% assign magnesium_100g = nf.magnesium_mg_100g | round: 1 %}
                        {% endif %}
                        {% assign magnesium_percent = magnesium_100g | times: 100.0 | divided_by: magnesium_dv | round: 0 %}
                        {% assign magnesium_percent_portion = magnesium_portion | times: 100.0 | divided_by: magnesium_dv | round: 0 %}
                        <tr>
                          <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.magnesium' | t }}</th>
                          <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ magnesium_portion }} mg ({{ magnesium_percent_portion }}% {{ 'nutrition.daily_value' | t }})</td>
                          <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ magnesium_100g }} mg ({{ magnesium_percent }}% {{ 'nutrition.daily_value' | t }})</td>
                        </tr>
                      {% endif %}

                      {% if nf.zinc_mg_100g %}
                        {% assign zinc_portion_raw = nf.zinc_mg_100g | times: portion_size | divided_by: 100.0 %}
                        {% if zinc_portion_raw >= 10 %}
                          {% assign zinc_portion = zinc_portion_raw | round: 0 %}
                        {% else %}
                          {% assign zinc_portion = zinc_portion_raw | round: 1 %}
                        {% endif %}
                        {% if nf.zinc_mg_100g >= 10 %}
                          {% assign zinc_100g = nf.zinc_mg_100g | round: 0 %}
                        {% else %}
                          {% assign zinc_100g = nf.zinc_mg_100g | round: 1 %}
                        {% endif %}
                        {% assign zinc_percent = zinc_100g | times: 100.0 | divided_by: zinc_dv | round: 0 %}
                        {% assign zinc_percent_portion = zinc_portion | times: 100.0 | divided_by: zinc_dv | round: 0 %}
                        <tr>
                          <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ 'nutrition.zinc' | t }}</th>
                          <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ zinc_portion }} mg ({{ zinc_percent_portion }}% {{ 'nutrition.daily_value' | t }})</td>
                          <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; border-bottom: 1px solid rgba(var(--color-primary-rgb), 0.2); color: var(--color-primary);"{% endif %}>{{ zinc_100g }} mg ({{ zinc_percent }}% {{ 'nutrition.daily_value' | t }})</td>
                        </tr>
                      {% endif %}

                      {% if nf.iron_mg_100g %}
                        {% assign iron_portion_raw = nf.iron_mg_100g | times: portion_size | divided_by: 100.0 %}
                        {% if iron_portion_raw >= 10 %}
                          {% assign iron_portion = iron_portion_raw | round: 0 %}
                        {% else %}
                          {% assign iron_portion = iron_portion_raw | round: 1 %}
                        {% endif %}
                        {% if nf.iron_mg_100g >= 10 %}
                          {% assign iron_100g = nf.iron_mg_100g | round: 0 %}
                        {% else %}
                          {% assign iron_100g = nf.iron_mg_100g | round: 1 %}
                        {% endif %}
                        {% assign iron_percent = iron_100g | times: 100.0 | divided_by: iron_dv | round: 0 %}
                        {% assign iron_percent_portion = iron_portion | times: 100.0 | divided_by: iron_dv | round: 0 %}
                        <tr>
                          <th{% if use_inline_style %} style="padding: 10px 12px; text-align: left; color: var(--color-primary);"{% endif %}>{{ 'nutrition.iron' | t }}</th>
                          <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; color: var(--color-primary);"{% endif %}>{{ iron_portion }} mg ({{ iron_percent_portion }}% {{ 'nutrition.daily_value' | t }})</td>
                          <td{% if use_inline_style %} style="padding: 10px 12px; text-align: center; color: var(--color-primary);"{% endif %}>{{ iron_100g }} mg ({{ iron_percent }}% {{ 'nutrition.daily_value' | t }})</td>
                        </tr>
                      {% endif %}
                    {% endif %}
                  </tbody>
                </table>
              </div>

              {% if nf.magnesium_mg_100g or nf.zinc_mg_100g or nf.iron_mg_100g %}
                <div{% if use_inline_style %} style="margin-top: 12px; color: var(--color-primary); font-style: italic; font-size: 12px;"{% endif %}>
                  <small>{{ 'nutrition.daily_value_note' | t }}</small>
                </div>
              {% endif %}
            {% else %}
              <div class="nutrition-empty"{% if use_inline_style %} style="color: var(--color-primary);"{% endif %}>{{ 'nutrition.no_info_available' | t }}</div>
            {% endif %}
          </div>
        {% endfor %}
      </div>
    </div>
  </section>

  <script>
    (function() {
      var root = document.getElementById('{{ unique_id }}');
      if (!root) return;

      var header = root.querySelector('.nutrition-accordion__header');
      var content = root.querySelector('.nutrition-accordion__content');
      var chevron = root.querySelector('.nutrition-accordion__chevron');
      var variantSelect = root.querySelector('.nutrition-variant-select');

      if (header && content && chevron) {
        var toggle = function() {
          var expanded = header.getAttribute('aria-expanded') === 'true';
          header.setAttribute('aria-expanded', String(!expanded));
          if (expanded) {
            content.setAttribute('hidden', 'hidden');
            chevron.style.transform = 'rotate(45deg)';
            header.style.borderRadius = '12px';
          } else {
            content.removeAttribute('hidden');
            chevron.style.transform = 'rotate(-135deg)';
            header.style.borderRadius = '12px 12px 0 0';
          }
        };
        header.addEventListener('click', toggle);
      }

      // Allergen highlighting function
      function highlightAllergens() {
        var allergens = [
          '{{ 'nutrition.allergens.oat' | t }}',
          '{{ 'nutrition.allergens.peanut' | t }}',
          '{{ 'nutrition.allergens.nut' | t }}'
        ];
        
        var ingredientElements = root.querySelectorAll('.nutrition-ingredients-text');
        ingredientElements.forEach(function(element) {
          var text = element.textContent;
          var highlightedText = text;
          
          allergens.forEach(function(allergen) {
            if (allergen && allergen.trim() !== '') {
              // Remove word boundaries to allow matching within composite words (e.g., kaurakuitu)
              var regex = new RegExp(allergen.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
              highlightedText = highlightedText.replace(regex, '<strong style="text-decoration: underline; font-weight: bold;">$&</strong>');
            }
          });
          
          if (highlightedText !== text) {
            element.innerHTML = highlightedText;
          }
        });
      }

      function showVariant(variantId) {
        var blocks = root.querySelectorAll('.nutrition-variant');
        blocks.forEach(function(el){ el.hidden = (el.getAttribute('data-variant-id') !== String(variantId)); });
        if (variantSelect) {
          variantSelect.value = variantId;
        }
        // Re-apply allergen highlighting when variant changes
        setTimeout(highlightAllergens, 10);
      }

      if (variantSelect) {
        variantSelect.addEventListener('change', function() {
          showVariant(this.value);
        });
        if (variantSelect.value) showVariant(variantSelect.value);
      }

      // Listen for product variant changes
      document.addEventListener('variant:change', function(e) {
        if (!e || !e.detail || !e.detail.variant) return;
        showVariant(e.detail.variant.id);
      });
      document.addEventListener('product:variant-change', function(e) {
        if (!e || !e.detail || !e.detail.variant) return;
        showVariant(e.detail.variant.id);
      });

      // Fallback: watch the product form selected variant id
      var idInput = document.querySelector('form[action*="/cart/add"] input[name="id"]');
      if (idInput) {
        var last = idInput.value;
        if (last) showVariant(last);
        var obs = new MutationObserver(function(){ if (idInput.value !== last) { last = idInput.value; showVariant(last); } });
        obs.observe(idInput, { attributes: true, attributeFilter: ['value'] });
        idInput.addEventListener('change', function(){ showVariant(this.value); });
      }

      // Apply allergen highlighting
      highlightAllergens();
    })();
  </script>
{% else %}
  <div class="nutrition-accordion nutrition-accordion--empty">
    <p>{{ 'nutrition.select_product' | t }}</p>
  </div>
{% endif %}

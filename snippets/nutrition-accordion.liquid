{% comment %}
Reusable Nutrition Accordion Snippet
Usage: {% render 'nutrition-accordion', product: product, variant_selector: true, css_class: 'my-custom-class' %}

Parameters:
- product: The product object (required)
- variant_selector: Show variant dropdown (default: false)
- css_class: Additional CSS classes (optional)
- inline_style: Whether to use inline styling (default: true)
- products_tag: Product tag to fetch products for bundle pages (optional)

New Bundle Support:
- If products_tag is provided, will display nutrition for all products with that tag
- Falls back to current behavior (product.variants) if no tag is provided
{% endcomment %}

{% liquid
  assign host_product = product
  if host_product == nil
    assign host_product = product
  endif
  
  assign show_selector = variant_selector | default: false
  assign extra_classes = css_class | default: ''
  assign use_inline_style = inline_style | default: true
  assign unique_id = 'nutrition-' | append: host_product.id | append: '-' | append: 'now' | date: '%s'
  
  # New: Support for bundle products via tags
  assign use_bundle_mode = false
  if products_tag != blank
    assign use_bundle_mode = true
  endif
%}

{% if host_product %}
  <section class="nutrition-accordion {{ extra_classes }}" id="{{ unique_id }}" data-product-id="{{ host_product.id }}"{% if use_inline_style %} style="margin: 16px 0; font-family: 'Acumin Pro Condensed', sans-serif;"{% endif %}>
    <div class="nutrition-accordion__header" role="button" aria-expanded="false" tabindex="0"{% if use_inline_style %} style="padding: 12px 16px; border: 1px solid var(--color-primary); border-radius: 12px; display: flex; align-items: center; justify-content: space-between; cursor: pointer; background: var(--color-primary); font-family: 'Acumin Pro Condensed', sans-serif;"{% endif %}>
      <h3{% if use_inline_style %} style="margin: 0; color: #fff;"{% endif %}>{{ 'nutrition.title' | t }}</h3>
      <span class="nutrition-accordion__chevron" aria-hidden="true"{% if use_inline_style %} style="width: 10px; height: 10px; border-right: 2px solid #fff; border-bottom: 2px solid #fff; transform: rotate(45deg); transition: transform .25s;"{% endif %}></span>
    </div>

    <div class="nutrition-accordion__content" hidden{% if use_inline_style %} style="padding: 16px; background: #fff; border: 1px solid var(--color-primary); border-top: none; border-radius: 0 0 12px 12px;"{% endif %}>
      
      {% if show_selector %}
        <select class="nutrition-variant-select"{% if use_inline_style %} style="width: 100%; margin-bottom: 16px; padding: 8px 12px; border: 1px solid var(--color-primary); border-radius: 8px; color: var(--color-primary);"{% endif %}>
          {% if use_bundle_mode %}
            {% comment %} Bundle mode: Show variants from products with the tag that have nutritional information {% endcomment %}
            {% for bundle_product in collections.all.products %}
              {% if bundle_product.tags contains products_tag %}
                {% for v in bundle_product.variants %}
                  {% assign nf_check = v.metafields.custom.nutrition.value %}
                  {% if nf_check %}
                    <option value="{{ v.id }}">{{ bundle_product.title }}{% unless v.title == 'Default Title' %} - {{ v.title }}{% endunless %}</option>
                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endfor %}
          {% else %}
            {% comment %} Regular mode: Show variants from current product {% endcomment %}
          {% for v in host_product.variants %}
            <option value="{{ v.id }}">{{ host_product.title }} {{ v.title }}</option>
          {% endfor %}
          {% endif %}
        </select>
      {% endif %}

      <div class="nutrition-accordion__variants">
        {% assign variant_counter = 0 %}
        {% if use_bundle_mode %}
          {% for bundle_product in collections.all.products %}
            {% if bundle_product.tags contains products_tag %}
              {% for v in bundle_product.variants %}
                {% assign nf = v.metafields.custom.nutrition.value %}
                {% if nf %}
                  <div class="nutrition-variant" data-variant-id="{{ v.id }}" {% if variant_counter > 0 %}hidden{% endif %}>
                    {% assign variant_counter = variant_counter | plus: 1 %}
                    {% render 'nutrition-content', nf: nf, use_inline_style: use_inline_style %}
                  </div>
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
        {% else %}
        {% for v in host_product.variants %}
          {% assign nf = v.metafields.custom.nutrition.value %}
          <div class="nutrition-variant" data-variant-id="{{ v.id }}" {% if forloop.first == false %}hidden{% endif %}>
              {% render 'nutrition-content', nf: nf, use_inline_style: use_inline_style %}
          </div>
        {% endfor %}
        {% endif %}
      </div>
    </div>
  </section>

  <script>
    (function() {
      var root = document.getElementById('{{ unique_id }}');
      if (!root) return;

      var header = root.querySelector('.nutrition-accordion__header');
      var content = root.querySelector('.nutrition-accordion__content');
      var chevron = root.querySelector('.nutrition-accordion__chevron');
      var variantSelect = root.querySelector('.nutrition-variant-select');

      if (header && content && chevron) {
        var toggle = function() {
          var expanded = header.getAttribute('aria-expanded') === 'true';
          header.setAttribute('aria-expanded', String(!expanded));
          if (expanded) {
            content.setAttribute('hidden', 'hidden');
            chevron.style.transform = 'rotate(45deg)';
            header.style.borderRadius = '12px';
          } else {
            content.removeAttribute('hidden');
            chevron.style.transform = 'rotate(-135deg)';
            header.style.borderRadius = '12px 12px 0 0';
          }
        };
        header.addEventListener('click', toggle);
      }

      // Allergen highlighting function
      function highlightAllergens() {
        var allergens = [
          '{{ 'nutrition.allergens.oat' | t }}',
          '{{ 'nutrition.allergens.peanut' | t }}',
          '{{ 'nutrition.allergens.nut' | t }}'
        ];
        
        var ingredientElements = root.querySelectorAll('.nutrition-ingredients-text');
        ingredientElements.forEach(function(element) {
          var text = element.textContent;
          var highlightedText = text;
          
          allergens.forEach(function(allergen) {
            if (allergen && allergen.trim() !== '') {
              // Remove word boundaries to allow matching within composite words (e.g., kaurakuitu)
              var regex = new RegExp(allergen.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
              highlightedText = highlightedText.replace(regex, '<strong style="text-decoration: underline; font-weight: bold;">$&</strong>');
            }
          });
          
          if (highlightedText !== text) {
            element.innerHTML = highlightedText;
          }
        });
      }

      function showVariant(variantId) {
        var blocks = root.querySelectorAll('.nutrition-variant');
        blocks.forEach(function(el){ el.hidden = (el.getAttribute('data-variant-id') !== String(variantId)); });
        if (variantSelect) {
          variantSelect.value = variantId;
        }
        // Re-apply allergen highlighting when variant changes
        setTimeout(highlightAllergens, 10);
      }

      if (variantSelect) {
        variantSelect.addEventListener('change', function() {
          showVariant(this.value);
        });
        if (variantSelect.value) showVariant(variantSelect.value);
      }

      // Listen for product variant changes
      document.addEventListener('variant:change', function(event) {
        if (event.detail && event.detail.variant && event.detail.variant.id) {
          showVariant(event.detail.variant.id);
        }
      });

      // Initial allergen highlighting
      setTimeout(highlightAllergens, 100);
    })();
  </script>
{% endif %}
